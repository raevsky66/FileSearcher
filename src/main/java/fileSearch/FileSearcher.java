package fileSearch;

import java.io.File;
import java.io.FileInputStream;
import java.nio.file.AccessDeniedException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

public class FileSearcher {

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    private static final List<String> foundFiles = Collections.synchronizedList(new ArrayList<>());

    /**
     * –ò—â–µ—Ç —Ñ–∞–π–ª—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –≤–æ –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞—Ö.
     *
     * @param directories –°–ø–∏—Å–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞.
     * @param searchText  –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.
     * @param xmlTag      –ï—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–æ, —Ç–æ –≤ XML-—Ñ–∞–π–ª–∞—Ö –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–≥–æ–º.
     * @param excelColumn –ï—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–æ, —Ç–æ –≤ Excel-—Ñ–∞–π–ª–∞—Ö –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ
     *                    (–Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "0" –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞).
     */
    public static void searchFiles(List<String> directories, String searchText, String xmlTag, String excelColumn) {
        foundFiles.clear();
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–∏—Å–∫–∞
        ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
        try {
            for (String directory : directories) {
                processDirectory(directory, searchText, xmlTag, excelColumn, executor);
            }
        } finally {
            shutdownExecutor(executor);
        }
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ (–æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        System.gc();
    }

    /**
     * –û–±—Ö–æ–¥–∏—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–¥–∞—á–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤.
     */
    private static void processDirectory(String directory, String searchText, String xmlTag, String excelColumn, ExecutorService executor) {
        try (Stream<Path> paths = Files.walk(Paths.get(directory))) {
            paths.filter(Files::isRegularFile)
                 .filter(path -> {
                     String lowerName = path.toString().toLowerCase();
                     return lowerName.endsWith(".xml") || lowerName.endsWith(".xls") || lowerName.endsWith(".xlsx");
                 })
                 .forEach(path -> executor.submit(() -> processFile(path.toFile(), searchText, xmlTag, excelColumn)));
        } catch (AccessDeniedException e) {
            System.err.println("‚ö† –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: " + directory);
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏: " + directory);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª ‚Äì –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –≤ XML –∏–ª–∏ Excel.
     */
    private static void processFile(File file, String searchText, String xmlTag, String excelColumn) {
        try {
            String fileName = file.getName().toLowerCase();
            if (fileName.endsWith(".xml") && searchTextInXml(file, searchText, xmlTag)) {
                foundFiles.add("üîç –ù–∞–π–¥–µ–Ω–æ –≤ XML: " + file.getAbsolutePath());
            } else if ((fileName.endsWith(".xls") || fileName.endsWith(".xlsx")) && searchTextInExcel(file, searchText, excelColumn)) {
                foundFiles.add("üìä –ù–∞–π–¥–µ–Ω–æ –≤ Excel: " + file.getAbsolutePath());
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: " + file.getAbsolutePath());
        }
    }

    /**
     * –ò—â–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ XML-—Ñ–∞–π–ª–µ.
     */
    private static boolean searchTextInXml(File file, String searchText, String xmlTag) {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(file);
            doc.getDocumentElement().normalize();

            NodeList nodes = (xmlTag == null || xmlTag.isEmpty()) 
                                ? doc.getElementsByTagName("*") 
                                : doc.getElementsByTagName(xmlTag);
            for (int i = 0; i < nodes.getLength(); i++) {
                if (nodes.item(i).getTextContent().contains(searchText)) {
                    return true;
                }
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ XML: " + file.getAbsolutePath());
        }
        return false;
    }

    /**
     * –ò—â–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ Excel-—Ñ–∞–π–ª–µ.
     */
    private static boolean searchTextInExcel(File file, String searchText, String excelColumn) {
        FileInputStream fis = null;
        Workbook workbook = null;
        try {
            fis = new FileInputStream(file);
            String lowerName = file.getName().toLowerCase();
            workbook = lowerName.endsWith(".xlsx") ? new XSSFWorkbook(fis) : new HSSFWorkbook(fis);

            for (Sheet sheet : workbook) {
                int columnIndex = (excelColumn != null && !excelColumn.isEmpty()) ? Integer.parseInt(excelColumn) : -1;
                for (Row row : sheet) {
                    if (columnIndex == -1) {
                        // –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º —Å—Ç—Ä–æ–∫–∏
                        for (Cell cell : row) {
                            if (cell.getCellType() == CellType.STRING && cell.getStringCellValue().contains(searchText)) {
                                return true;
                            }
                        }
                    } else {
                        // –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ
                        Cell cell = row.getCell(columnIndex);
                        if (cell != null && cell.getCellType() == CellType.STRING && cell.getStringCellValue().contains(searchText)) {
                            return true;
                        }
                    }
                }
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel: " + file.getAbsolutePath());
        } finally {
            try {
                if (workbook != null) {
                    workbook.close();
                }
                if (fis != null) {
                    fis.close();
                }
            } catch (Exception ex) {
                System.err.println("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Ç–æ–∫–æ–≤ Excel: " + file.getAbsolutePath());
            }
        }
        return false;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
     */
    public static List<String> getFoundFiles() {
        return foundFiles;
    }

    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤.
     */
    private static void shutdownExecutor(ExecutorService executor) {
        executor.shutdown();
        try {
            if (!executor.awaitTermination(10, TimeUnit.SECONDS)) {
                executor.shutdownNow();
            }
        } catch (InterruptedException e) {
            executor.shutdownNow();
        }
    }
}
